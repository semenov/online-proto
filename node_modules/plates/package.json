{
  "name": "plates",
  "version": "0.4.6",
  "description": "Unobtrusive templating for the flatiron framework",
  "keywords": [
    "templates",
    "templating",
    "unobtrusive"
  ],
  "author": {
    "name": "hij1nx",
    "email": "hij1nx@gmail.com"
  },
  "maintainers": [
    {
      "name": "Paolo Fragomeni",
      "email": "hij1nx@nodejitsu.com"
    },
    {
      "name": "Maciej Ma≈Çecki",
      "email": "maciej.malecki@notimplemented.org"
    }
  ],
  "licenses": [
    {
      "type": "MIT"
    }
  ],
  "repositories": [
    {
      "type": "git",
      "url": "git://github.com/flatiron/plates.git"
    }
  ],
  "devDependencies": {
    "vows": "0.6.x",
    "mustache": "0.3.x",
    "benchmark": "0.2.x"
  },
  "scripts": {
    "test": "vows --spec test/api-test.js"
  },
  "engines": [
    "node"
  ],
  "main": "./lib/plates.js",
  "readme": "\n<img src=\"https://github.com/flatiron/plates/raw/master/plates.png\" />\n\n# Synopsis\nPlates (short for templates) binds data to markup. Plates has NO special syntax. It works in the browser and in `Node.js`.\n\n# Motivation\n- DSLs (Domain Specific Languages) such as <%=foo%> or {{foo}} reduce portability.\n- DOM templating is SLOW.\n- Promote the separation of concerns principle by decoupling decision making from presentation.\n- Make both the code and markup more readable and maintainable by a wider audience.\n\n# Status\n\n[![Build Status](https://secure.travis-ci.org/flatiron/plates.png)](http://travis-ci.org/flatiron/plates)\n\n# Features\n- Automatically bind data to a tag's body by matching unique tag IDs to data keys.\n- Bind data to a tag's body based on any attribute's values.\n- Bind data to a tag's attribute based on any attribute's values.\n\n- TODO: Specify option to create attribute if it does not exist.\n\n# Installation\nThere are a few ways to use `plates`. Install the library using npm. You can add it to your `package.json` file as a dependancy, or include the script in your HTML page.\n\n# Usage\n\n## Simple case\nBy default, `plates` will try to match the `data-key` in the data to an `ID` in the tag, since both should are uniqe.\n\n```js\nvar Plates = require('plates');\n\nvar html = '<div id=\"test\">Old Value</div>';\nvar data = { \"test\": \"New Value\" };\n\nvar output = Plates.bind(html, data); \n```\n\n## Explicit instructions\nA common use case is to apply the new value to each tag's body based on the class attribute.\n\n```js\nvar html = '<span class=\"name\">User</span>...<span class=\"name\">User</span>';\n\nvar data = { \"username\": \"John Smith\" };\nvar map = Plates.Map();\n\nmap.class('name').to('username');\n\nconsole.log(Plates.bind(html, data, map));\n```\n\n## Complex instructions\nAnother common case is to want to replace the value of an attribute if it is a match.\n\n```js\nvar html = '<a href=\"/\"></a>';\n\nvar data = { \"newurl\": \"http://www.nodejitsu.com\" };\nvar map = Plates.Map();\n\nmap.where('href').is('/').insert('newurl');\n\nconsole.log(Plates.bind(html, data, map));\n```\n\nIn even more complex cases, an arbitrary attribute an be specified, if a value is matched, a specific value can be used and then used as anther attribute's value.\n\n```js\nvar html = '<a href=\"/\"></a>';\n\nvar data = { \"imageurl\": \"http://www.nodejitsu.com\" };\nvar map = Plates.Map();\n\nmap.where('data-foo').is('bar').use('imageurl').as('src');\n\nconsole.log(Plates.bind(html, data, map));\n```\n\n# API\n\n## Plates Static Methods\n\n```\nfunction Plates.bind(html, data, map)\n@param html {String} A string of well formed HTML.\n@param data {Object} A JSON object.\n@param map {Object} an instance of `Plates.Map()`.\n\n@return {String} the result of merging the data and html.\n```\n\n## Map Constructor\n\n```\nfunction Plates.Map(options)\n@options {Object} an object literal that contains configuration options.\n  - @option where {String} the default attribute to match on instead of ID.\n  - @option as {String} the default attribute to replace into.\n@return {Object} an object that represents a reusable map, has mapping methods.\n```\n\n## Map Instance Methods\n\n### where()\n\n```\nfunction Map#where(attribute)\n@param attribute {String} an attribute that may be found in a tag\n\nThis method will initiate a `clause`. Once a clause has been established,\nother member methods may be chained to eachother in any order.\n```\n\n### class()\n\n```\nfunction Map#class(attribute)\n@param attribute {String} an value that may be found in the class attribute of a tag\n```\n\n### insert()\n\n```\nfunction Map#insert(attribute)\n@param attribute {String} a string that represents a data-key, data will be inserted into \nthe attribute that was specified in the `where` clause.\n```\n\n### is()\n\n```\nfunction Map#is(value)\n@param value {String} the value of the attribute specified in the `where` clause.\n```\n\n### use()\n\n```\nfunction Map#use(key)\n@param key {String} a string that represents a key in the data object that was provided.\n```\n\n### to()\n\n```\nfunction Map#to(key)\n@param key {String} a string that represents a key in the data object that was provided.\n\nSame as `use` method.\n```\n\n### as()\n\n```\nfunction Map#as(attribute)\n@param attribute {String} a string that represents an attribute in the tag.\n\nIf there is no attribute by that name found, one may be created depending on the options\nthat were passed to the Map constructor.\n```\n\n# License\n\n(The MIT License)\n\nCopyright (c) 2011 Nodejitsu Inc. http://www.twitter.com/nodejitsu\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the 'Software'), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "_id": "plates@0.4.6",
  "dist": {
    "shasum": "5c0da658b1993b81b9dfd0c55696871eb269a2ae"
  },
  "_from": "plates"
}
